/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenMarket, TokenMarketInterface } from "../TokenMarket";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenPairAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getLatestPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_precision",
        type: "uint8",
      },
    ],
    name: "swapEthToUsd",
    outputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_precision",
        type: "uint8",
      },
    ],
    name: "swapUsdToEth",
    outputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109103803806109108339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6108028061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630e80edf214610046578063835de634146100765780638e15f473146100a6575b600080fd5b610060600480360381019061005b9190610349565b6100c5565b60405161006d919061046c565b60405180910390f35b610090600480360381019061008b9190610349565b61011a565b60405161009d919061046c565b60405180910390f35b6100ae61016f565b6040516100bc929190610443565b60405180910390f35b60008060006100d261016f565b915091508184600a6100e49190610556565b8683600a6100f2919061050b565b6100fc9190610674565b6101069190610674565b6101109190610487565b9250505092915050565b600080600061012761016f565b9150915080600a610138919061050b565b84600a6101459190610556565b86846101519190610674565b61015b9190610674565b6101659190610487565b9250505092915050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156101db57600080fd5b505afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102139190610385565b50505091505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba91906103fc565b60ff16905081819350935050509091565b6000815190506102da81610770565b92915050565b6000813590506102ef81610787565b92915050565b60008151905061030481610787565b92915050565b6000813590506103198161079e565b92915050565b60008151905061032e816107b5565b92915050565b6000815190506103438161079e565b92915050565b6000806040838503121561035c57600080fd5b600061036a858286016102e0565b925050602061037b8582860161030a565b9150509250929050565b600080600080600060a0868803121561039d57600080fd5b60006103ab8882890161031f565b95505060206103bc888289016102cb565b94505060406103cd888289016102f5565b93505060606103de888289016102f5565b92505060806103ef8882890161031f565b9150509295509295909350565b60006020828403121561040e57600080fd5b600061041c84828501610334565b91505092915050565b61042e816106ce565b82525050565b61043d816106d8565b82525050565b60006040820190506104586000830185610425565b6104656020830184610434565b9392505050565b60006020820190506104816000830184610434565b92915050565b6000610492826106d8565b915061049d836106d8565b9250826104ad576104ac610734565b5b828204905092915050565b6000808291508390505b6001851115610502578086048111156104de576104dd610705565b5b60018516156104ed5780820291505b80810290506104fb85610763565b94506104c2565b94509492505050565b6000610516826106d8565b9150610521836106d8565b925061054e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846105a1565b905092915050565b6000610561826106d8565b915061056c836106e2565b92506105997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846105a1565b905092915050565b6000826105b1576001905061066d565b816105bf576000905061066d565b81600181146105d557600281146105df5761060e565b600191505061066d565b60ff8411156105f1576105f0610705565b5b8360020a91508482111561060857610607610705565b5b5061066d565b5060208310610133831016604e8410600b84101617156106435782820a90508381111561063e5761063d610705565b5b61066d565b61065084848460016104b8565b9250905081840481111561066757610666610705565b5b81810290505b9392505050565b600061067f826106d8565b915061068a836106d8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106c3576106c2610705565b5b828202905092915050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008160011c9050919050565b610779816106ce565b811461078457600080fd5b50565b610790816106d8565b811461079b57600080fd5b50565b6107a7816106e2565b81146107b257600080fd5b50565b6107be816106ef565b81146107c957600080fd5b5056fea2646970667358221220ec9ebe0779519a0bad73cef756f6cf582326cc2b5deeec958048eac36bc659d264736f6c63430008040033";

export class TokenMarket__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    tokenPairAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenMarket> {
    return super.deploy(
      tokenPairAddress,
      overrides || {}
    ) as Promise<TokenMarket>;
  }
  getDeployTransaction(
    tokenPairAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenPairAddress, overrides || {});
  }
  attach(address: string): TokenMarket {
    return super.attach(address) as TokenMarket;
  }
  connect(signer: Signer): TokenMarket__factory {
    return super.connect(signer) as TokenMarket__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenMarketInterface {
    return new utils.Interface(_abi) as TokenMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenMarket {
    return new Contract(address, _abi, signerOrProvider) as TokenMarket;
  }
}
